rule: L003

test_fail_reindent_first_line_1:
  fail_str: '     SELECT 1'
  fix_str: SELECT 1

test_fail_reindent_first_line_2:
  # Github Bug #99. Python2 Issues with fixing L003
  fail_str: '  select 1 from tbl;'
  fix_str: select 1 from tbl;

test_pass_indentation_of_comments_1:
  # Github Bug #203
  # Comments should be aligned to the following line.
  pass_str: |
    SELECT
        -- Compute the thing
        (a + b) AS c
    FROM
        acceptable_buckets

test_pass_indentation_of_comments_2:
  # Comments should be aligned to the following line.
  pass_str: |
    SELECT
        user_id
    FROM
        age_data
    JOIN
        audience_size
        USING (user_id, list_id)
    -- We LEFT JOIN because blah
    LEFT JOIN
        verts
        USING
            (user_id)

test_fail_tab_indentation:
  # Using tabs as indents works
  fail_str: |
    SELECT
    	a,
    b
    FROM my_tbl
  fix_str: |
    SELECT
    	a,
    	b
    FROM my_tbl
  configs:
    rules:
      indent_unit: tab

test_pass_indented_joins_default:
  # Configurable indents work.
  # a) default
  pass_str: |
    SELECT a, b, c
    FROM my_tbl
    LEFT JOIN another_tbl USING(a)

test_pass_indented_joins_false:
  # b) specific
  pass_str: |
    SELECT a, b, c
    FROM my_tbl
    LEFT JOIN another_tbl USING(a)
  configs:
    indentation:
      indented_joins: false

test_pass_indented_joins_true:
  # c) specific True, but passing
  pass_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl USING(a)

  configs:
    indentation:
      indented_joins: true

test_fail_indented_joins_true_fix:
  # d) specific True, but failing
  fail_str: |
    SELECT a, b, c
    FROM my_tbl
    LEFT JOIN another_tbl USING(a)
  fix_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl USING(a)
  configs:
    indentation:
      indented_joins: true

test_fail_indented_joins_false_fix:
  # e) specific False, and failing
  fail_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl USING(a)
  fix_str: |
    SELECT a, b, c
    FROM my_tbl
    LEFT JOIN another_tbl USING(a)
  configs:
    indentation:
      indented_joins: false

test_pass_indented_using_on_default:
  # Configurable using_on indents work.
  # 2.a) default
  pass_str: |
    SELECT a, b, c
    FROM my_tbl
    LEFT JOIN another_tbl
        USING(a)

test_pass_indented_using_on_true:
  # 2.b) specific
  pass_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl
            USING(a)
  configs:
    indentation:
      indented_joins: true
      indented_using_on: true

test_pass_indented_using_on_false:
  # 2.c) specific False, but passing
  pass_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl
        USING(a)
  configs:
    indentation:
      indented_joins: true
      indented_using_on: false

test_fail_indented_using_on_false:
  # 2.d) specific False, but failing
  fail_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl
            USING(a)
  fix_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl
        USING(a)
  configs:
    indentation:
      indented_joins: true
      indented_using_on: false

test_fail_indented_joins_using_on_true:
  # 2.e) specific True, and failing
  fail_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl
        USING(a)
  fix_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl
            USING(a)
  configs:
    indentation:
      indented_joins: true
      indented_using_on: true

test_fail_indented_joins_using_on_false:
  # 2.f) specific false for both, and failing
  fail_str: |
    SELECT a, b, c
    FROM my_tbl
        LEFT JOIN another_tbl
            USING(a)
  fix_str: |
    SELECT a, b, c
    FROM my_tbl
    LEFT JOIN another_tbl
    USING(a)
  configs:
    indentation:
      indented_joins: false
      indented_using_on: false

test_pass_indented_from_with_comment:
  pass_str: |
    SELECT *
    FROM
        t1
    -- Comment
    JOIN t2 USING (user_id)

test_fail_indented_from_with_comment_fix:
  fail_str: |
    SELECT *
    FROM
        t1
        -- Comment
    JOIN t2 USING (user_id)
  fix_str: |
    SELECT *
    FROM
        t1
    -- Comment
    JOIN t2 USING (user_id)

test_fail_indented_multi_line_comment:
  fail_str: |
    SELECT
    business_type,

    -- The following is the slope of the regression line. Note that CORR (which is the Pearson's correlation
    -- coefficient is symmetric in its arguments, but since STDDEV_POP(open_rate_su) appears in the
    customer_type

    FROM
    global_actions_states
  fix_str: |
    SELECT
        business_type,

        -- The following is the slope of the regression line. Note that CORR (which is the Pearson's correlation
        -- coefficient is symmetric in its arguments, but since STDDEV_POP(open_rate_su) appears in the
        customer_type

    FROM
        global_actions_states

test_fail_attempted_hanger_fix:
  # It's almost a hanger and so should be corrected to one.
  fail_str: |
    SELECT coalesce(foo,
                  bar)
       FROM tbl
  fix_str: |
    SELECT coalesce(foo,
                    bar)
    FROM tbl

test_fail_possible_hanger_fix:
  # It's not even close to a hanging indent, but we should
  # still attempt this, although this is potentially a questionable
  # fix and could be an approach we change in the future.
  fail_str: |
    SELECT coalesce(foo,
     bar)
       FROM tbl
  fix_str: |
    SELECT coalesce(foo,
                    bar)
    FROM tbl

test_fail_consecutive_hangers:
  fail_str: |
    select *
    from foo
    where a like 'a%'
      and b like 'b%'
      and c like 'c%'
      and d like 'd%'
      and e like 'e%'
      and f like 'f%'
  fix_str: |
    select *
    from foo
    where a like 'a%'
          and b like 'b%'
          and c like 'c%'
          and d like 'd%'
          and e like 'e%'
          and f like 'f%'


test_fail_clean_reindent_fix:
  # A "clean" indent is where the previous line ends with an
  # indent token (as per this example). We should use the
  # default approach and indent by 1 step.
  fail_str: |
    SELECT coalesce(
    foo,
                    bar)
       FROM tbl
  fix_str: |
    SELECT coalesce(
        foo,
        bar)
    FROM tbl

# https://github.com/sqlfluff/sqlfluff/issues/643
test_pass_indent_snowflake:
  pass_str: |
    with source_data as (
        select * from {{ source('source_name', 'xxx_yyy_zzz') }}
    )

    select *
    from source_data
  configs:
    core:
      dialect: snowflake

# https://github.com/sqlfluff/sqlfluff/issues/643
test_pass_indent_indent_bigquery:
  pass_str: |
    with source_data as (
        select * from {{ source('source_name', 'xxx_yyy_zzz') }}
    )
    select *
    from source_data
  configs:
    core:
      dialect: bigquery


test_jinja_indent_templated_table_name_a:
  fail_str: |
    -- This file combines product data from individual brands into a staging table
    {% for product in ['table1', 'table2'] %}
    SELECT
      brand,
      country_code,
      category,
      name,
      id
    FROM
      {{ product }}
    {% if not loop.last -%} UNION ALL {%- endif %}
    {% endfor %}
  fix_str: |
    -- This file combines product data from individual brands into a staging table
    {% for product in ['table1', 'table2'] %}
        SELECT
            brand,
            country_code,
            category,
            name,
            id
        FROM
            {{ product }}
    {% if not loop.last -%} UNION ALL {%- endif %}
    {% endfor %}

# Like test_jinja_indent_1_a but "FROM" table not initially
# indented.
test_jinja_indent_templated_table_name_b:
  fail_str: |
    -- This file combines product data from individual brands into a staging table
    {% for product in ['table1', 'table2'] %}
    SELECT
      brand,
      country_code,
      category,
      name,
      id
    FROM
    {{ product }}
    {% if not loop.last -%} UNION ALL {%- endif %}
    {% endfor %}
  fix_str: |
    -- This file combines product data from individual brands into a staging table
    {% for product in ['table1', 'table2'] %}
        SELECT
            brand,
            country_code,
            category,
            name,
            id
        FROM
            {{ product }}
    {% if not loop.last -%} UNION ALL {%- endif %}
    {% endfor %}

test_jinja_nested_blocks:
  fail_str: |
    WITH
    raw_effect_sizes AS (
    SELECT
    {% for action in ['a'] %}
    {% if True %}
    rate_su_{{action}},
    {% endif %}
    {% endfor %}
    )
    SELECT 1

  fix_str: |
    WITH
    raw_effect_sizes AS (
        SELECT
            {% for action in ['a'] %}
                {% if True %}
                    rate_su_{{action}},
                {% endif %}
            {% endfor %}
    )
    SELECT 1

# LIMIT and QUALIFY both indent
test_limit_and_qualify_indent:
  fail_str: |
    SELECT
        a,
        b
    FROM
    my_tbl
    QUALIFY
    1
    LIMIT
    1
  fix_str: |
    SELECT
        a,
        b
    FROM
        my_tbl
    QUALIFY
        1
    LIMIT
        1
  configs:
    core:
      dialect: bigquery

# LIMIT and QUALIFY both acceptable on single line
test_limit_and_qualify_single_line:
  pass_str: |
    SELECT
        a,
        b
    FROM
        my_tbl
    QUALIFY 1
    LIMIT 1
  configs:
    core:
      dialect: bigquery

# Exasol LUA script
test_exasol_script:
  pass_str: |
    CREATE OR REPLACE LUA SCRIPT ASCRIPT (APARAM) RETURNS ROWCOUNT AS
        res = 1
        suc = true
        if not suc then
            error("ERROR")
        end
        return res
    /
  configs:
    core:
      dialect: exasol

test_pass_tsql_else_if:
  pass_str: |
    IF (1 > 1)
        PRINT 'A';
    ELSE IF (2 > 2)
        PRINT 'B';
    ELSE IF (3 > 3)
        PRINT 'C';
    ELSE
        PRINT 'D';
  configs:
    core:
      dialect: tsql

test_fail_tsql_else_if:
  fail_str: |
    IF (1 > 1)
      PRINT 'A';
     ELSE IF (2 > 2)
         PRINT 'B';
    ELSE IF (3 > 3)
     PRINT 'C';
    ELSE
            PRINT 'D';
  fix_str: |
    IF (1 > 1)
        PRINT 'A';
    ELSE IF (2 > 2)
        PRINT 'B';
    ELSE IF (3 > 3)
        PRINT 'C';
    ELSE
        PRINT 'D';
  configs:
    core:
      dialect: tsql

test_fail_tsql_else_if_successive:
  fail_str: |
    IF (1 > 1)
        PRINT 'A';
        ELSE IF (2 > 2)
            PRINT 'B';
            ELSE IF (3 > 3)
                PRINT 'C';
                ELSE
                    PRINT 'D';
  fix_str: |
    IF (1 > 1)
        PRINT 'A';
    ELSE IF (2 > 2)
        PRINT 'B';
    ELSE IF (3 > 3)
        PRINT 'C';
    ELSE
        PRINT 'D';
  configs:
    core:
      dialect: tsql

# TSQL function
test_tsql_function:
  fail_str: |
    CREATE FUNCTION dbo.isoweek (@DATE datetime)
    RETURNS int
    WITH EXECUTE AS CALLER
    AS
    BEGIN
        DECLARE @ISOweek int;
        SET @ISOweek = DATEPART(wk, @DATE) + 1
            - DATEPART(wk, CAST(DATEPART(yy, @DATE) AS char(4)) + '0104');
    --Special cases Jan 1-3 may belong to the previous year
        IF (@ISOweek = 0)
            SET @ISOweek = dbo.ISOWEEK(CAST(DATEPART(yy, @DATE) - 1
                AS char(4)
            ) + '12' + CAST(24 + DATEPART(day, @DATE) AS char(2))) + 1;
    --Special case Dec 29-31 may belong to the next year
        IF ((DATEPART(mm, @DATE) = 12)
        AND ((DATEPART(dd, @DATE) - DATEPART(dw, @DATE)) >= 28))
        SET @ISOweek = 1;
        RETURN(@ISOweek);
    END;
    GO
  fix_str: |
    CREATE FUNCTION dbo.isoweek (@DATE datetime)
    RETURNS int
    WITH EXECUTE AS CALLER
    AS
    BEGIN
        DECLARE @ISOweek int;
        SET @ISOweek = DATEPART(wk, @DATE) + 1
        - DATEPART(wk, CAST(DATEPART(yy, @DATE) AS char(4)) + '0104');
        --Special cases Jan 1-3 may belong to the previous year
        IF (@ISOweek = 0)
            SET @ISOweek = dbo.ISOWEEK(CAST(DATEPART(yy, @DATE) - 1
                AS char(4)
            ) + '12' + CAST(24 + DATEPART(day, @DATE) AS char(2))) + 1;
        --Special case Dec 29-31 may belong to the next year
        IF ((DATEPART(mm, @DATE) = 12)
            AND ((DATEPART(dd, @DATE) - DATEPART(dw, @DATE)) >= 28))
            SET @ISOweek = 1;
        RETURN(@ISOweek);
    END;
    GO
  configs:
    core:
      dialect: tsql

test_pass_ignore_templated_whitespace:
  pass_str: |
    SELECT
        c1,
        {{ "      c2" }}
    FROM my_table
  configs:
    core:
      ignore_templated_areas: False

test_fail_ignore_templated_whitespace_1:
  fail_str: |
    SELECT
        c1,
    d{{ "      c2" }}
    FROM my_table
  fix_str: |
    SELECT
        c1,
        d{{ "      c2" }}
    FROM my_table

  configs:
    core:
      ignore_templated_areas: False

test_fail_ignore_templated_whitespace_2:
  fail_str: |
    SELECT
        c1,
      d{{ "      c2" }}
    FROM my_table
  fix_str: |
    SELECT
        c1,
        d{{ "      c2" }}
    FROM my_table
  configs:
    core:
      ignore_templated_areas: False

test_fail_ignore_templated_whitespace_3:
  fail_str: |
    SELECT
        c1,
          d{{ "      c2" }}
    FROM my_table
  fix_str: |
    SELECT
        c1,
        d{{ "      c2" }}
    FROM my_table
  configs:
    core:
      ignore_templated_areas: False
