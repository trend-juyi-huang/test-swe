rule: L028

# Mixed qualification of references.
test_fail_single_table_mixed_qualification_of_references:
  fail_str: SELECT my_tbl.bar, baz FROM my_tbl

test_pass_single_table_consistent_references_1:
  pass_str: SELECT bar FROM my_tbl

test_pass_single_table_consistent_references_2:
  pass_str: SELECT my_tbl.bar FROM my_tbl

test_fail_single_table_mixed_qualification_of_references_subquery:
  fail_str: SELECT * FROM (SELECT my_tbl.bar, baz FROM my_tbl)

test_pass_single_table_consistent_references_1_subquery:
  pass_str: SELECT * FROM (SELECT bar FROM my_tbl)

test_pass_single_table_consistent_references_2_subquery:
  pass_str: SELECT * FROM (SELECT my_tbl.bar FROM my_tbl)

test_fail_single_table_reference_when_unqualified_config:
  fail_str: SELECT my_tbl.bar FROM my_tbl

  configs:
    rules:
      L028:
        single_table_references: unqualified

test_fail_single_table_reference_when_qualified_config:
  fail_str: SELECT bar FROM my_tbl

  configs:
    rules:
      L028:
        single_table_references: qualified

test_pass_single_table_reference_in_subquery:
  # Catch issues with subqueries properly
  pass_str: |
    SELECT * FROM db.sc.tbl2
    WHERE a NOT IN (SELECT a FROM db.sc.tbl1)

test_value_table_functions_do_not_require_qualification:
  pass_str: |
    select
        a.*,
        _t_start
    from a
    left join unnest(generate_timestamp_array(
            '2020-01-01', '2020-01-30', interval 1 day)) as _t_start
        on true
  configs:
    core:
      dialect: bigquery
    rules:
      L028:
        force_enable: true

test_object_references_1a:
  # This should fail as "a" is an unreference object
  fail_str: SELECT a.bar, b FROM my_tbl

test_object_references_1b:
  # This should not-fail as "a" is potentially a STRUCT
  pass_str: SELECT a.bar, b FROM my_tbl
  configs:
    core:
      dialect: bigquery

test_object_references_1c:
  # This should fail as even though "a" is potenitally a STRUCT
  # The config has been set to enforce the rule
  fail_str: SELECT a.bar, b FROM my_tbl
  configs:
    core:
      dialect: bigquery
    rules:
      L028:
        force_enable: true

test_object_references_1d:
  # This should not-fail as "a" is potentially a STRUCT
  pass_str: SELECT a.bar, b FROM my_tbl
  configs:
    core:
      dialect: hive

test_object_references_1e:
  # This should not-fail as "a" is potentially a STRUCT
  pass_str: SELECT a.bar, b FROM my_tbl
  configs:
    core:
      dialect: redshift

test_tsql_pivot_are_excluded:
  # This should pass as tsql PIVOT columns do not need to be
  # qualified
  pass_str: |
    select
      t1._id
      , [1] as lvl_1
      , [2] as lvl_2
      , [3] as lvl_3
    from
      table1 t1
    pivot
      (max(value) for rn in([1], [2], [3]) ) as pvt
  configs:
    core:
      dialect: tsql


test_date_functions_are_excluded:
  # This should pass as date keywords columns do not need to be
  # qualified
  pass_str: |
    SELECT
        a.[hello],
        DATEDIFF(day, a.[mydate], GETDATE()) AS [test]
    FROM
        mytable AS a
  configs:
    core:
      dialect: tsql


test_select_alias_in_where_clause_1:
  # This should pass for certain dialects
  pass_str: |
    select
        t.col0,
        t.col1 + 1 as alias_col1
    from table1 as t
    where alias_col1 > 5
  configs:
    core:
      dialect: redshift


test_select_alias_in_where_clause_2:
  # This should pass for certain dialects
  pass_str: |
    select
        t.col0,
        t.col1 + 1 as alias_col1
    from table1 as t
    where alias_col1 > 5
  configs:
    core:
      dialect: snowflake


test_select_alias_in_where_clause_3:
  # This should fail for ansi
  fail_str: |
    select
        t.col0,
        t.col1 + 1 as alias_col1
    from table1 as t
    where alias_col1 > 5
