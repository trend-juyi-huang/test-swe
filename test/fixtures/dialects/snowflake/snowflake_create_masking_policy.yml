# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 6780f4ce434647ca9c96d5ed07a88659c8e222dca11bc8bac8e274ff4d90f722
file:
- statement:
    create_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: MASKING
    - keyword: POLICY
    - object_reference:
      - identifier: XXXX
      - dot: .
      - identifier: XX
      - dot: .
      - identifier: example_MASKING_POLICY
    - keyword: AS
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: VARCHAR
      - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: VARCHAR
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: CASE
        - when_clause:
          - keyword: WHEN
          - expression:
              function:
                function_name:
                  function_name_identifier: is_role_in_session
                bracketed:
                  start_bracket: (
                  expression:
                    literal: "'SNOWFLAKE_PII'"
                  end_bracket: )
          - keyword: THEN
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: ELSE
            expression:
              literal: "'*** masked ***'"
        - keyword: END
    - keyword: COMMENT
    - comparison_operator:
        raw_comparison_operator: '='
    - literal: "'Applied 2021-07-13T03:12:16+0000'"
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'ANALYST'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              literal: "'*********'"
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_account
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'<prod_account_identifier>'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              literal: "'*********'"
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: IN
              bracketed:
                start_bracket: (
                literal: "'ANALYST'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              literal: 'NULL'
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'ANALYST'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              literal: "'********'"
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'ANALYST'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              function:
                function_name:
                  function_name_identifier: sha2
                bracketed:
                  start_bracket: (
                  expression:
                    column_reference:
                      identifier: val
                  end_bracket: )
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'ANALYST'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'SUPPORT'"
                end_bracket: )
          - keyword: then
          - expression:
              function:
                function_name:
                  function_name_identifier: regexp_replace
                bracketed:
                - start_bracket: (
                - expression:
                    column_reference:
                      identifier: val
                - comma: ','
                - expression:
                    literal: "'.+\\@'"
                - comma: ','
                - expression:
                    literal: "'*****@'"
                - end_bracket: )
        - else_clause:
            keyword: else
            expression:
              literal: "'********'"
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'SUPPORT'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              function:
                function_name:
                  function_name_identifier: date_from_parts
                bracketed:
                - start_bracket: (
                - expression:
                    literal: '0001'
                - comma: ','
                - expression:
                    literal: '01'
                - comma: ','
                - expression:
                    literal: '01'
                - end_bracket: )
              cast_expression:
                casting_operator: '::'
                data_type:
                  data_type_identifier: timestamp_ntz
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'ANALYST'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              function:
                function_name:
                  function_name_identifier: mask_udf
                bracketed:
                  start_bracket: (
                  expression:
                    column_reference:
                      identifier: val
                  end_bracket: )
        - keyword: end
- statement_terminator: ;
- statement:
    create_statement:
    - keyword: create
    - binary_operator: or
    - keyword: replace
    - keyword: masking
    - keyword: policy
    - object_reference:
        identifier: email_mask
    - keyword: as
    - bracketed:
      - start_bracket: (
      - expression:
          column_reference:
            identifier: val
      - expression:
          column_reference:
            identifier: string
      - end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - function_assigner: ->
    - expression:
        case_expression:
        - keyword: case
        - when_clause:
          - keyword: when
          - expression:
              function:
                function_name:
                  function_name_identifier: current_role
                bracketed:
                  start_bracket: (
                  end_bracket: )
              keyword: in
              bracketed:
                start_bracket: (
                literal: "'ANALYST'"
                end_bracket: )
          - keyword: then
          - expression:
              column_reference:
                identifier: val
        - else_clause:
            keyword: else
            expression:
              function:
                function_name:
                  function_name_identifier: object_insert
                bracketed:
                - start_bracket: (
                - expression:
                    column_reference:
                      identifier: val
                - comma: ','
                - expression:
                    literal: "'USER_IPADDRESS'"
                - comma: ','
                - expression:
                    literal: "'****'"
                - comma: ','
                - expression:
                    literal: 'true'
                - end_bracket: )
        - keyword: end
- statement_terminator: ;
