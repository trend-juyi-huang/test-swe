# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: d52c1378d74abdf12f28a31ee6195518d64eba3e8c396c3c6428fed5e9ac3497
file:
- statement:
    create_clone_statement:
    - keyword: create
    - keyword: schema
    - identifier: mytestschema_clone_restore
    - keyword: clone
    - identifier: testschema
- statement_terminator: ;
- statement:
    create_clone_statement:
    - keyword: create
    - keyword: schema
    - identifier: mytestschema_clone_restore
    - keyword: clone
    - identifier: testschema
    - from_before_expression:
        keyword: before
        bracketed:
          start_bracket: (
          keyword: timestamp
          parameter_assigner: =>
          expression:
            function:
              function_name:
                function_name_identifier: to_timestamp
              bracketed:
                start_bracket: (
                expression:
                - literal: '40'
                - binary_operator: '*'
                - literal: '365'
                - binary_operator: '*'
                - literal: '86400'
                end_bracket: )
          end_bracket: )
- statement_terminator: ;
- statement:
    create_schema_statement:
    - keyword: create
    - keyword: schema
    - schema_reference:
        identifier: mytestschema
    - schema_object_properties:
        comment_equals_clause:
          keyword: comment
          comparison_operator:
            raw_comparison_operator: '='
          literal: "'My test schema.'"
- statement_terminator: ;
- statement:
    create_schema_statement:
    - keyword: create
    - keyword: schema
    - schema_reference:
        identifier: mytestschema
    - tag_bracketed_equals:
        keyword: tag
        bracketed:
        - start_bracket: (
        - identifier: tag1
        - comparison_operator:
            raw_comparison_operator: '='
        - literal: "'foo'"
        - comma: ','
        - identifier: tag2
        - comparison_operator:
            raw_comparison_operator: '='
        - literal: "'bar'"
        - end_bracket: )
- statement_terminator: ;
- statement:
    create_schema_statement:
    - keyword: create
    - keyword: schema
    - schema_reference:
        identifier: mytestschema
    - keyword: with
    - keyword: managed
    - keyword: access
- statement_terminator: ;
- statement:
    create_schema_statement:
    - keyword: create
    - keyword: transient
    - keyword: schema
    - keyword: if
    - keyword: not
    - keyword: exists
    - schema_reference:
        identifier: mytestschema
    - schema_object_properties:
        keyword: default_ddl_collation
        comparison_operator:
          raw_comparison_operator: '='
        literal: "'de_DE'"
- statement_terminator: ;
