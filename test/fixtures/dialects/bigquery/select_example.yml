# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: b3320d5e7297b6df478a33c196587cc260df20eb0bd0955e7a8df98a5961e732
file:
  statement:
    with_compound_statement:
    - keyword: WITH
    - common_table_expression:
        identifier: age_buckets_bit_array
        keyword: AS
        bracketed:
          start_bracket: (
          select_statement:
            select_clause:
            - keyword: SELECT
            - select_clause_element:
                column_reference:
                  identifier: bucket_id
            - comma: ','
            - select_clause_element:
                column_reference:
                  identifier: num_ranges
            - comma: ','
            - select_clause_element:
                column_reference:
                  identifier: min_age
            - comma: ','
            - select_clause_element:
                function:
                  function_name:
                    function_name_identifier: ARRAY
                  bracketed:
                    start_bracket: (
                    expression:
                      select_statement:
                        select_clause:
                          keyword: SELECT
                          select_clause_element:
                            function:
                              function_name:
                                function_name_identifier: CAST
                              bracketed:
                                start_bracket: (
                                expression:
                                  column_reference:
                                    identifier: num
                                keyword: AS
                                data_type:
                                  data_type_identifier: INT64
                                end_bracket: )
                        from_clause:
                          keyword: FROM
                          from_expression:
                            from_expression_element:
                              table_expression:
                                function:
                                  function_name:
                                    function_name_identifier: UNNEST
                                  bracketed:
                                    start_bracket: (
                                    expression:
                                      function:
                                        function_name:
                                          function_name_identifier: SPLIT
                                        bracketed:
                                        - start_bracket: (
                                        - expression:
                                            column_reference:
                                              identifier: binary
                                        - comma: ','
                                        - expression:
                                            literal: "''"
                                        - end_bracket: )
                                    end_bracket: )
                              alias_expression:
                                keyword: AS
                                identifier: num
                    end_bracket: )
                alias_expression:
                  keyword: AS
                  identifier: bits
            - comma: ','
            - select_clause_element:
                column_reference:
                  identifier: age_label
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      identifier: age_buckets
          end_bracket: )
    - comma: ','
    - common_table_expression:
        identifier: bucket_abundance
        keyword: AS
        bracketed:
          start_bracket: (
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                expression:
                  function:
                    function_name:
                      function_name_identifier: bucket_id
                    bracketed:
                      start_bracket: (
                      expression:
                      - column_reference:
                          identifier: count_18_24
                      - binary_operator: '*'
                      - column_reference:
                          identifier: bits
                      - array_accessor:
                          start_square_bracket: '['
                          expression:
                            function:
                              function_name:
                                function_name_identifier: OFFSET
                              bracketed:
                                start_bracket: (
                                expression:
                                  literal: '0'
                                end_bracket: )
                          end_square_bracket: ']'
                      - binary_operator: +
                      - column_reference:
                          identifier: count_25_34
                      - binary_operator: '*'
                      - column_reference:
                          identifier: bits
                      - array_accessor:
                          start_square_bracket: '['
                          expression:
                            function:
                              function_name:
                                function_name_identifier: OFFSET
                              bracketed:
                                start_bracket: (
                                expression:
                                  literal: '1'
                                end_bracket: )
                          end_square_bracket: ']'
                      - binary_operator: +
                      - column_reference:
                          identifier: count_35_44
                      - binary_operator: '*'
                      - column_reference:
                          identifier: bits
                      - array_accessor:
                          start_square_bracket: '['
                          expression:
                            function:
                              function_name:
                                function_name_identifier: OFFSET
                              bracketed:
                                start_bracket: (
                                expression:
                                  literal: '2'
                                end_bracket: )
                          end_square_bracket: ']'
                      - binary_operator: +
                      - column_reference:
                          identifier: count_45_54
                      - binary_operator: '*'
                      - column_reference:
                          identifier: bits
                      - array_accessor:
                          start_square_bracket: '['
                          expression:
                            function:
                              function_name:
                                function_name_identifier: OFFSET
                              bracketed:
                                start_bracket: (
                                expression:
                                  literal: '3'
                                end_bracket: )
                          end_square_bracket: ']'
                      - binary_operator: +
                      - column_reference:
                          identifier: count_55_64
                      - binary_operator: '*'
                      - column_reference:
                          identifier: bits
                      - array_accessor:
                          start_square_bracket: '['
                          expression:
                            function:
                              function_name:
                                function_name_identifier: OFFSET
                              bracketed:
                                start_bracket: (
                                expression:
                                  literal: '4'
                                end_bracket: )
                          end_square_bracket: ']'
                      - binary_operator: +
                      - column_reference:
                          identifier: count_65_plus
                      - binary_operator: '*'
                      - column_reference:
                          identifier: bits
                      - array_accessor:
                          start_square_bracket: '['
                          expression:
                            function:
                              function_name:
                                function_name_identifier: OFFSET
                              bracketed:
                                start_bracket: (
                                expression:
                                  literal: '5'
                                end_bracket: )
                          end_square_bracket: ']'
                      end_bracket: )
                  binary_operator: /
                  column_reference:
                    identifier: audience_size
                alias_expression:
                  keyword: AS
                  identifier: relative_abundance
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      identifier: audience_counts_gender_age
                join_clause:
                - keyword: CROSS
                - keyword: JOIN
                - from_expression_element:
                    table_expression:
                      table_reference:
                        identifier: age_buckets_bit_array
          end_bracket: )
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: age_buckets_bit_array
            join_clause:
            - keyword: JOIN
            - from_expression_element:
                table_expression:
                  table_reference:
                    identifier: bucket_abundance
            - keyword: USING
            - bracketed:
                start_bracket: (
                identifier: bucket_id
                end_bracket: )
