# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: efd2e8cc5e85c8f4c91a68726455bdccedfd0168f56283ac32676317c8e05cdc
file:
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        identifier: users
    - bracketed:
      - start_bracket: (
      - column_definition:
          identifier: username
          data_type:
            data_type_identifier: TEXT
      - comma: ','
      - column_definition:
          identifier: age
          data_type:
            data_type_identifier: INT
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  identifier: age
                comparison_operator:
                  raw_comparison_operator: '>'
                literal: '18'
              end_bracket: )
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        identifier: users
    - bracketed:
      - start_bracket: (
      - column_definition:
          identifier: username
          data_type:
            data_type_identifier: TEXT
      - comma: ','
      - column_definition:
          identifier: age
          data_type:
            data_type_identifier: INT
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
              - column_reference:
                  identifier: age
              - keyword: IS
              - keyword: NOT
              - keyword: 'NULL'
              end_bracket: )
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        identifier: Persons
    - bracketed:
      - start_bracket: (
      - column_definition:
          identifier: ID
          data_type:
            data_type_identifier: int
          column_constraint_segment:
          - keyword: NOT
          - keyword: 'NULL'
      - comma: ','
      - column_definition:
          identifier: LastName
          data_type:
            data_type_identifier: varchar
            bracketed:
              start_bracket: (
              expression:
                literal: '255'
              end_bracket: )
          column_constraint_segment:
          - keyword: NOT
          - keyword: 'NULL'
      - comma: ','
      - column_definition:
          identifier: FirstName
          data_type:
            data_type_identifier: varchar
            bracketed:
              start_bracket: (
              expression:
                literal: '255'
              end_bracket: )
      - comma: ','
      - column_definition:
          identifier: Age
          data_type:
            data_type_identifier: int
      - comma: ','
      - column_definition:
          identifier: City
          data_type:
            data_type_identifier: varchar
            bracketed:
              start_bracket: (
              expression:
                literal: '255'
              end_bracket: )
      - comma: ','
      - column_definition:
          identifier: CONSTRAINT
          data_type:
            data_type_identifier: CHK_Person
          column_constraint_segment:
            keyword: CHECK
            bracketed:
              start_bracket: (
              expression:
              - column_reference:
                  identifier: Age
              - comparison_operator:
                - raw_comparison_operator: '>'
                - raw_comparison_operator: '='
              - literal: '18'
              - binary_operator: AND
              - column_reference:
                  identifier: City
              - comparison_operator:
                  raw_comparison_operator: '='
              - literal: "'Sandnes'"
              end_bracket: )
      - end_bracket: )
- statement_terminator: ;
